name: Build Test Deploy Apps

# Trigger the workflow when new tag with the defined pattern is created
on:
  push:
    tags:
    - "v*"
  workflow_dispatch:      

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      # Checkout the repo to the runner
      - name: Checkout
        uses: actions/checkout@v3

      # Define Docker metadata for app A
      - name: Define Docker metadata for app-a
        uses: docker/metadata-action@v4
        id: meta-a
        with:
          images: biopix/app_a
          flavor: latest=true
          tags: |
            type=semver,pattern={{version}}

      # Define Docker metadata for app B            
      - name: Define Docker metadata for app-b
        uses: docker/metadata-action@v4
        id: meta-b
        with:
          images: biopix/app_b
          flavor: latest=true
          tags: |
            type=semver,pattern={{version}}

      # Login to Docker Hub registry
      - name: Login to docker hub registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      # Build the Docker image of app A for vuln test 
      - name: Build app A for testing
        uses: docker/build-push-action@v4
        with:
          context: apps/app_a
          load: true
          tags: 'app_a:vuln-test'
          
      # Build the Docker image of app A for vuln test
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'app_a:vuln-test'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          
      # Build the Docker image of app B for vuln test 
      - name: Build app B for testing
        uses: docker/build-push-action@v4
        with:
          context: apps/app_b
          load: true
          tags: 'app_b:vuln-test'
          
      # Build the Docker image of app B for vuln test
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'app_b:vuln-test'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
      
      # Build the Docker image of app A at test stage without pushing it 
      - name: Build app A for testing
        uses: docker/build-push-action@v4
        with:
          context: apps/app_a
          load: true
          target: "test"
          tags: "app_a/test:test"
      
      # Run the test image
      - name: Testing app A
        run: |
          docker run --rm app_a/test:test

      # Build and push app A
      - name: Build and push app-a
        uses: docker/build-push-action@v4
        with:
          context: apps/app_a
          file: apps/app_a/Dockerfile
          push: true
          tags: ${{ steps.meta-a.outputs.tags }}
      
      # Build and push app B 
      - name: Build and push app-b
        uses: docker/build-push-action@v4
        with:
          context: apps/app_b
          file: apps/app_b/Dockerfile
          push: true
          tags: ${{ steps.meta-b.outputs.tags }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Connect to the EC2 and deploy the apps
      - name: Deploy apps to EC2
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
          HOSTNAME : ${{ secrets.AWS_HOSTNAME }}
          USER_NAME : ${{ secrets.AWS_USER_NAME }}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            # The following commands should executed in EC2.
            cd /home/ubuntu/devops-homework &&
            git checkout main &&
            git fetch --all &&
            git reset --hard origin/main &&
            git pull origin main &&
            cd k8s &&
            kubectl rollout restart deployment/app-a-deployment &&
            kubectl rollout restart deployment/app-b-deployment 
          '

      # Get cluster's health after deployment
      - name: Run Kube-Bench to check cluster config
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
          HOSTNAME : ${{ secrets.AWS_HOSTNAME }}
          USER_NAME : ${{ secrets.AWS_USER_NAME }}
        continue-on-error: true
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
              kubectl apply -f https://raw.githubusercontent.com/aquasecurity/kube-bench/main/job-aks.yaml &&
              sleep 30s &&
              kubectl logs job.batch/kube-bench &&
              kubectl delete job.batch/kube-bench
           '
